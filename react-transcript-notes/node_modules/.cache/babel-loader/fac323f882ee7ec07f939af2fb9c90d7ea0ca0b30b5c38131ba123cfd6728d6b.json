{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"http://localhost:5000/api\";\n\n// Use the free Web Speech API for transcription\nexport const transcribeAudio = async audioFile => {\n  if (!audioFile || !(audioFile instanceof File)) {\n    throw new Error(\"A valid audio file is required\");\n  }\n\n  // For actual voice recording (when using the mic), we'll use Web Speech API\n  if (audioFile.name === \"recording.wav\") {\n    return window.recordedTranscript || \"No transcript was recorded. Please try recording again.\";\n  }\n\n  // For audio file upload, we can try browser-based transcription with Web Speech API\n  return new Promise((resolve, reject) => {\n    // Check if browser supports speech recognition\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!SpeechRecognition) {\n      reject(new Error(\"Speech recognition not supported in this browser. Try Chrome or Edge.\"));\n      return;\n    }\n\n    // Create audio element to play the file\n    const audio = new Audio();\n    const fileURL = URL.createObjectURL(audioFile);\n    audio.src = fileURL;\n\n    // Initialize speech recognition\n    const recognition = new SpeechRecognition();\n    recognition.continuous = true;\n    recognition.interimResults = false;\n    recognition.lang = \"en-US\";\n    let transcript = \"\";\n    recognition.onresult = event => {\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        if (event.results[i].isFinal) {\n          transcript += event.results[i][0].transcript + \" \";\n        }\n      }\n    };\n    recognition.onerror = event => {\n      console.error(\"Speech recognition error\", event.error);\n      // Don't reject - we still want to return whatever we've captured\n    };\n    recognition.onend = () => {\n      if (transcript.trim()) {\n        resolve(transcript);\n      } else {\n        resolve(`This is an uploaded audio file. Web Speech API has limitations with pre-recorded audio. \n                For the best results, please use the microphone recording feature directly.\n                \n                Sample transcript for demonstration: \n                \"Today we discussed the implementation of speech recognition technologies \n                and their integration with note-taking applications. The key challenges \n                include browser compatibility and the need for server-side processing for \n                more advanced features.\"`);\n      }\n    };\n\n    // Start audio and recognition\n    audio.onplay = () => {\n      recognition.start();\n    };\n    audio.onended = () => {\n      recognition.stop();\n    };\n\n    // Handle errors\n    audio.onerror = e => {\n      console.error(\"Audio error\", e);\n      reject(new Error(\"Error playing audio file\"));\n    };\n\n    // Play the audio file\n    audio.play().catch(err => {\n      console.error(\"Error playing audio\", err);\n      reject(new Error(\"Browser prevented audio playback. Try a different browser or use the microphone directly.\"));\n    });\n\n    // Safety timeout - stop after max duration\n    setTimeout(() => {\n      if (recognition) {\n        recognition.stop();\n      }\n    }, 300000); // 5 min max\n  });\n};\n\n// This function is called by the RecordingControls component when live recording happens\nexport const setupLiveTranscription = () => {\n  window.recordedTranscript = \"\";\n  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  if (!SpeechRecognition) {\n    return {\n      supported: false,\n      error: \"Speech recognition not supported in this browser\"\n    };\n  }\n  const recognition = new SpeechRecognition();\n  recognition.continuous = true;\n  recognition.interimResults = true;\n  recognition.onresult = event => {\n    let interimTranscript = \"\";\n    let finalTranscript = window.recordedTranscript || \"\";\n    for (let i = event.resultIndex; i < event.results.length; i++) {\n      const transcript = event.results[i][0].transcript;\n      if (event.results[i].isFinal) {\n        finalTranscript += transcript + \" \";\n      } else {\n        interimTranscript += transcript;\n      }\n    }\n    window.recordedTranscript = finalTranscript;\n\n    // You can display interim results if wanted\n    if (window.onInterimTranscript) {\n      window.onInterimTranscript(interimTranscript);\n    }\n  };\n  return {\n    supported: true,\n    recognition\n  };\n};","map":{"version":3,"names":["axios","API_URL","transcribeAudio","audioFile","File","Error","name","window","recordedTranscript","Promise","resolve","reject","SpeechRecognition","webkitSpeechRecognition","audio","Audio","fileURL","URL","createObjectURL","src","recognition","continuous","interimResults","lang","transcript","onresult","event","i","resultIndex","results","length","isFinal","onerror","console","error","onend","trim","onplay","start","onended","stop","e","play","catch","err","setTimeout","setupLiveTranscription","supported","interimTranscript","finalTranscript","onInterimTranscript"],"sources":["E:/LETU/Transcript-Notes/Transcript-Notes/react-transcript-notes/src/services/transcriptionService.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = \"http://localhost:5000/api\";\r\n\r\n// Use the free Web Speech API for transcription\r\nexport const transcribeAudio = async (audioFile) => {\r\n  if (!audioFile || !(audioFile instanceof File)) {\r\n    throw new Error(\"A valid audio file is required\");\r\n  }\r\n\r\n  // For actual voice recording (when using the mic), we'll use Web Speech API\r\n  if (audioFile.name === \"recording.wav\") {\r\n    return (\r\n      window.recordedTranscript ||\r\n      \"No transcript was recorded. Please try recording again.\"\r\n    );\r\n  }\r\n\r\n  // For audio file upload, we can try browser-based transcription with Web Speech API\r\n  return new Promise((resolve, reject) => {\r\n    // Check if browser supports speech recognition\r\n    const SpeechRecognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n\r\n    if (!SpeechRecognition) {\r\n      reject(\r\n        new Error(\r\n          \"Speech recognition not supported in this browser. Try Chrome or Edge.\"\r\n        )\r\n      );\r\n      return;\r\n    }\r\n\r\n    // Create audio element to play the file\r\n    const audio = new Audio();\r\n    const fileURL = URL.createObjectURL(audioFile);\r\n    audio.src = fileURL;\r\n\r\n    // Initialize speech recognition\r\n    const recognition = new SpeechRecognition();\r\n    recognition.continuous = true;\r\n    recognition.interimResults = false;\r\n    recognition.lang = \"en-US\";\r\n\r\n    let transcript = \"\";\r\n\r\n    recognition.onresult = (event) => {\r\n      for (let i = event.resultIndex; i < event.results.length; i++) {\r\n        if (event.results[i].isFinal) {\r\n          transcript += event.results[i][0].transcript + \" \";\r\n        }\r\n      }\r\n    };\r\n\r\n    recognition.onerror = (event) => {\r\n      console.error(\"Speech recognition error\", event.error);\r\n      // Don't reject - we still want to return whatever we've captured\r\n    };\r\n\r\n    recognition.onend = () => {\r\n      if (transcript.trim()) {\r\n        resolve(transcript);\r\n      } else {\r\n        resolve(`This is an uploaded audio file. Web Speech API has limitations with pre-recorded audio. \r\n                For the best results, please use the microphone recording feature directly.\r\n                \r\n                Sample transcript for demonstration: \r\n                \"Today we discussed the implementation of speech recognition technologies \r\n                and their integration with note-taking applications. The key challenges \r\n                include browser compatibility and the need for server-side processing for \r\n                more advanced features.\"`);\r\n      }\r\n    };\r\n\r\n    // Start audio and recognition\r\n    audio.onplay = () => {\r\n      recognition.start();\r\n    };\r\n\r\n    audio.onended = () => {\r\n      recognition.stop();\r\n    };\r\n\r\n    // Handle errors\r\n    audio.onerror = (e) => {\r\n      console.error(\"Audio error\", e);\r\n      reject(new Error(\"Error playing audio file\"));\r\n    };\r\n\r\n    // Play the audio file\r\n    audio.play().catch((err) => {\r\n      console.error(\"Error playing audio\", err);\r\n      reject(\r\n        new Error(\r\n          \"Browser prevented audio playback. Try a different browser or use the microphone directly.\"\r\n        )\r\n      );\r\n    });\r\n\r\n    // Safety timeout - stop after max duration\r\n    setTimeout(() => {\r\n      if (recognition) {\r\n        recognition.stop();\r\n      }\r\n    }, 300000); // 5 min max\r\n  });\r\n};\r\n\r\n// This function is called by the RecordingControls component when live recording happens\r\nexport const setupLiveTranscription = () => {\r\n  window.recordedTranscript = \"\";\r\n\r\n  const SpeechRecognition =\r\n    window.SpeechRecognition || window.webkitSpeechRecognition;\r\n\r\n  if (!SpeechRecognition) {\r\n    return {\r\n      supported: false,\r\n      error: \"Speech recognition not supported in this browser\",\r\n    };\r\n  }\r\n\r\n  const recognition = new SpeechRecognition();\r\n  recognition.continuous = true;\r\n  recognition.interimResults = true;\r\n\r\n  recognition.onresult = (event) => {\r\n    let interimTranscript = \"\";\r\n    let finalTranscript = window.recordedTranscript || \"\";\r\n\r\n    for (let i = event.resultIndex; i < event.results.length; i++) {\r\n      const transcript = event.results[i][0].transcript;\r\n      if (event.results[i].isFinal) {\r\n        finalTranscript += transcript + \" \";\r\n      } else {\r\n        interimTranscript += transcript;\r\n      }\r\n    }\r\n\r\n    window.recordedTranscript = finalTranscript;\r\n\r\n    // You can display interim results if wanted\r\n    if (window.onInterimTranscript) {\r\n      window.onInterimTranscript(interimTranscript);\r\n    }\r\n  };\r\n\r\n  return {\r\n    supported: true,\r\n    recognition,\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}