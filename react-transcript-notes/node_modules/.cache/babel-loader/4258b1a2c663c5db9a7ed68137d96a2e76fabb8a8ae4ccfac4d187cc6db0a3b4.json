{"ast":null,"code":"import axios from \"axios\";\nexport const generateNotes = async transcript => {\n  try {\n    const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\n    if (!apiKey) {\n      throw new Error(\"GEMINI_API_KEY is not set in environment variables\");\n    }\n\n    // For a real application, this request would typically go through a backend service\n    // to avoid exposing your API key in the frontend\n    const response = await axios.post(`https://generativelanguage.googleapis.com/v1/models/gemini-2.0-flash:generateContent?key=${apiKey}`, {\n      contents: [{\n        parts: [{\n          text: `Generate comprehensive, well-organized notes from this transcript: ${transcript}`\n        }]\n      }]\n    });\n\n    // Extract generated text from response\n    if (response.data && response.data.candidates && response.data.candidates[0] && response.data.candidates[0].content && response.data.candidates[0].content.parts && response.data.candidates[0].content.parts[0]) {\n      return response.data.candidates[0].content.parts[0].text;\n    } else {\n      return \"Sorry, could not generate notes from the transcript.\";\n    }\n  } catch (error) {\n    var _error$response, _error$response$data, _error$response$data$;\n    console.error(\"Error generating notes:\", error);\n    throw new Error(\"Failed to generate notes: \" + (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : (_error$response$data$ = _error$response$data.error) === null || _error$response$data$ === void 0 ? void 0 : _error$response$data$.message) || error.message));\n  }\n};","map":{"version":3,"names":["axios","generateNotes","transcript","apiKey","process","env","REACT_APP_GEMINI_API_KEY","Error","response","post","contents","parts","text","data","candidates","content","error","_error$response","_error$response$data","_error$response$data$","console","message"],"sources":["E:/LETU/Transcript-Notes/Transcript-Notes/react-transcript-notes/src/services/notesGenerationService.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nexport const generateNotes = async (transcript) => {\r\n  try {\r\n    const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\r\n\r\n    if (!apiKey) {\r\n      throw new Error(\"GEMINI_API_KEY is not set in environment variables\");\r\n    }\r\n\r\n    // For a real application, this request would typically go through a backend service\r\n    // to avoid exposing your API key in the frontend\r\n    const response = await axios.post(\r\n      `https://generativelanguage.googleapis.com/v1/models/gemini-2.0-flash:generateContent?key=${apiKey}`,\r\n      {\r\n        contents: [\r\n          {\r\n            parts: [\r\n              {\r\n                text: `Generate comprehensive, well-organized notes from this transcript: ${transcript}`,\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      }\r\n    );\r\n\r\n    // Extract generated text from response\r\n    if (\r\n      response.data &&\r\n      response.data.candidates &&\r\n      response.data.candidates[0] &&\r\n      response.data.candidates[0].content &&\r\n      response.data.candidates[0].content.parts &&\r\n      response.data.candidates[0].content.parts[0]\r\n    ) {\r\n      return response.data.candidates[0].content.parts[0].text;\r\n    } else {\r\n      return \"Sorry, could not generate notes from the transcript.\";\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error generating notes:\", error);\r\n    throw new Error(\r\n      \"Failed to generate notes: \" +\r\n        (error.response?.data?.error?.message || error.message)\r\n    );\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,aAAa,GAAG,MAAOC,UAAU,IAAK;EACjD,IAAI;IACF,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB;IAEnD,IAAI,CAACH,MAAM,EAAE;MACX,MAAM,IAAII,KAAK,CAAC,oDAAoD,CAAC;IACvE;;IAEA;IACA;IACA,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAC/B,4FAA4FN,MAAM,EAAE,EACpG;MACEO,QAAQ,EAAE,CACR;QACEC,KAAK,EAAE,CACL;UACEC,IAAI,EAAE,sEAAsEV,UAAU;QACxF,CAAC;MAEL,CAAC;IAEL,CACF,CAAC;;IAED;IACA,IACEM,QAAQ,CAACK,IAAI,IACbL,QAAQ,CAACK,IAAI,CAACC,UAAU,IACxBN,QAAQ,CAACK,IAAI,CAACC,UAAU,CAAC,CAAC,CAAC,IAC3BN,QAAQ,CAACK,IAAI,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,OAAO,IACnCP,QAAQ,CAACK,IAAI,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,OAAO,CAACJ,KAAK,IACzCH,QAAQ,CAACK,IAAI,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,OAAO,CAACJ,KAAK,CAAC,CAAC,CAAC,EAC5C;MACA,OAAOH,QAAQ,CAACK,IAAI,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,OAAO,CAACJ,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI;IAC1D,CAAC,MAAM;MACL,OAAO,sDAAsD;IAC/D;EACF,CAAC,CAAC,OAAOI,KAAK,EAAE;IAAA,IAAAC,eAAA,EAAAC,oBAAA,EAAAC,qBAAA;IACdC,OAAO,CAACJ,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAM,IAAIT,KAAK,CACb,4BAA4B,IACzB,EAAAU,eAAA,GAAAD,KAAK,CAACR,QAAQ,cAAAS,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBJ,IAAI,cAAAK,oBAAA,wBAAAC,qBAAA,GAApBD,oBAAA,CAAsBF,KAAK,cAAAG,qBAAA,uBAA3BA,qBAAA,CAA6BE,OAAO,KAAIL,KAAK,CAACK,OAAO,CAC1D,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}