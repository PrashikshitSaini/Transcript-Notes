{"ast":null,"code":"import axios from \"axios\";\nexport const generateNotes = async transcript => {\n  try {\n    const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\n    if (!apiKey) {\n      return \"ERROR: GEMINI_API_KEY is not set in environment variables. Please add your API key to the .env file.\";\n    }\n\n    // Check if the transcript is our placeholder message\n    if (transcript.includes(\"This is a demonstration\") || transcript.includes(\"This is a placeholder\")) {\n      return `\n# Demo Notes\n      \nThis is a demonstration of what generated notes would look like from a real transcript.\n\n## Sample Meeting Notes:\n\n### Key Points:\n- Speech recognition technology can be implemented in web applications\n- Browser-based speech recognition has limitations\n- Server-side solutions offer more robust capabilities\n- APIs like Google Speech-to-Text provide professional transcription services\n\n### Action Items:\n- Research server-side transcription options\n- Evaluate cost and performance of different API solutions\n- Implement secure audio file handling\n- Add user feedback mechanism for transcription quality\n\n### Next Steps:\n- Create a prototype with backend transcription service\n- Test with various audio qualities and accents\n- Document API integration process\n      `;\n    }\n\n    // For a real application, this request would typically go through a backend service\n    // to avoid exposing your API key in the frontend\n    const response = await axios.post(`https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent?key=${apiKey}`, {\n      contents: [{\n        parts: [{\n          text: `Generate comprehensive, well-organized notes from this transcript: ${transcript}`\n        }]\n      }]\n    });\n\n    // Extract generated text from response\n    if (response.data && response.data.candidates && response.data.candidates[0] && response.data.candidates[0].content && response.data.candidates[0].content.parts && response.data.candidates[0].content.parts[0]) {\n      return response.data.candidates[0].content.parts[0].text;\n    } else {\n      return \"Sorry, could not generate notes from the transcript. The API response format was unexpected.\";\n    }\n  } catch (error) {\n    var _error$response, _error$response$data, _error$response$data$;\n    console.error(\"Error generating notes:\", error);\n    return \"Error generating notes: \" + (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : (_error$response$data$ = _error$response$data.error) === null || _error$response$data$ === void 0 ? void 0 : _error$response$data$.message) || error.message) + \"\\n\\nPlease check your API key and internet connection.\";\n  }\n};","map":{"version":3,"names":["axios","generateNotes","transcript","apiKey","process","env","REACT_APP_GEMINI_API_KEY","includes","response","post","contents","parts","text","data","candidates","content","error","_error$response","_error$response$data","_error$response$data$","console","message"],"sources":["E:/LETU/Transcript-Notes/Transcript-Notes/react-transcript-notes/src/services/notesGenerationService.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nexport const generateNotes = async (transcript) => {\r\n  try {\r\n    const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\r\n\r\n    if (!apiKey) {\r\n      return \"ERROR: GEMINI_API_KEY is not set in environment variables. Please add your API key to the .env file.\";\r\n    }\r\n\r\n    // Check if the transcript is our placeholder message\r\n    if (\r\n      transcript.includes(\"This is a demonstration\") ||\r\n      transcript.includes(\"This is a placeholder\")\r\n    ) {\r\n      return `\r\n# Demo Notes\r\n      \r\nThis is a demonstration of what generated notes would look like from a real transcript.\r\n\r\n## Sample Meeting Notes:\r\n\r\n### Key Points:\r\n- Speech recognition technology can be implemented in web applications\r\n- Browser-based speech recognition has limitations\r\n- Server-side solutions offer more robust capabilities\r\n- APIs like Google Speech-to-Text provide professional transcription services\r\n\r\n### Action Items:\r\n- Research server-side transcription options\r\n- Evaluate cost and performance of different API solutions\r\n- Implement secure audio file handling\r\n- Add user feedback mechanism for transcription quality\r\n\r\n### Next Steps:\r\n- Create a prototype with backend transcription service\r\n- Test with various audio qualities and accents\r\n- Document API integration process\r\n      `;\r\n    }\r\n\r\n    // For a real application, this request would typically go through a backend service\r\n    // to avoid exposing your API key in the frontend\r\n    const response = await axios.post(\r\n      `https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent?key=${apiKey}`,\r\n      {\r\n        contents: [\r\n          {\r\n            parts: [\r\n              {\r\n                text: `Generate comprehensive, well-organized notes from this transcript: ${transcript}`,\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      }\r\n    );\r\n\r\n    // Extract generated text from response\r\n    if (\r\n      response.data &&\r\n      response.data.candidates &&\r\n      response.data.candidates[0] &&\r\n      response.data.candidates[0].content &&\r\n      response.data.candidates[0].content.parts &&\r\n      response.data.candidates[0].content.parts[0]\r\n    ) {\r\n      return response.data.candidates[0].content.parts[0].text;\r\n    } else {\r\n      return \"Sorry, could not generate notes from the transcript. The API response format was unexpected.\";\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error generating notes:\", error);\r\n    return (\r\n      \"Error generating notes: \" +\r\n      (error.response?.data?.error?.message || error.message) +\r\n      \"\\n\\nPlease check your API key and internet connection.\"\r\n    );\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,aAAa,GAAG,MAAOC,UAAU,IAAK;EACjD,IAAI;IACF,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB;IAEnD,IAAI,CAACH,MAAM,EAAE;MACX,OAAO,sGAAsG;IAC/G;;IAEA;IACA,IACED,UAAU,CAACK,QAAQ,CAAC,yBAAyB,CAAC,IAC9CL,UAAU,CAACK,QAAQ,CAAC,uBAAuB,CAAC,EAC5C;MACA,OAAO;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;IACH;;IAEA;IACA;IACA,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAC/B,4FAA4FN,MAAM,EAAE,EACpG;MACEO,QAAQ,EAAE,CACR;QACEC,KAAK,EAAE,CACL;UACEC,IAAI,EAAE,sEAAsEV,UAAU;QACxF,CAAC;MAEL,CAAC;IAEL,CACF,CAAC;;IAED;IACA,IACEM,QAAQ,CAACK,IAAI,IACbL,QAAQ,CAACK,IAAI,CAACC,UAAU,IACxBN,QAAQ,CAACK,IAAI,CAACC,UAAU,CAAC,CAAC,CAAC,IAC3BN,QAAQ,CAACK,IAAI,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,OAAO,IACnCP,QAAQ,CAACK,IAAI,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,OAAO,CAACJ,KAAK,IACzCH,QAAQ,CAACK,IAAI,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,OAAO,CAACJ,KAAK,CAAC,CAAC,CAAC,EAC5C;MACA,OAAOH,QAAQ,CAACK,IAAI,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,OAAO,CAACJ,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI;IAC1D,CAAC,MAAM;MACL,OAAO,8FAA8F;IACvG;EACF,CAAC,CAAC,OAAOI,KAAK,EAAE;IAAA,IAAAC,eAAA,EAAAC,oBAAA,EAAAC,qBAAA;IACdC,OAAO,CAACJ,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,OACE,0BAA0B,IACzB,EAAAC,eAAA,GAAAD,KAAK,CAACR,QAAQ,cAAAS,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBJ,IAAI,cAAAK,oBAAA,wBAAAC,qBAAA,GAApBD,oBAAA,CAAsBF,KAAK,cAAAG,qBAAA,uBAA3BA,qBAAA,CAA6BE,OAAO,KAAIL,KAAK,CAACK,OAAO,CAAC,GACvD,wDAAwD;EAE5D;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}