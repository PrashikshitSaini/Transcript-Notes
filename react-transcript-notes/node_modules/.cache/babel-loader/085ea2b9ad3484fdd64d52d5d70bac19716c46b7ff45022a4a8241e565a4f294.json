{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"http://localhost:5000/api\";\nexport const generateNotes = async transcript => {\n  if (!transcript) {\n    return \"No transcript provided. Please record or upload audio first.\";\n  }\n  try {\n    // First try to use the local server\n    const response = await axios.post(`${API_URL}/generate-notes`, {\n      transcript\n    });\n    if (response.data && response.data.notes) {\n      return response.data.notes;\n    }\n    throw new Error(\"Invalid response from notes generation server\");\n  } catch (serverError) {\n    console.error(\"Server error, falling back to direct API call:\", serverError);\n\n    // Fall back to direct API call if server fails\n    try {\n      var _directResponse$data, _directResponse$data$, _directResponse$data$2, _directResponse$data$3, _directResponse$data$4, _directResponse$data$5;\n      const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\n      if (!apiKey) {\n        return \"ERROR: GEMINI_API_KEY is not set in environment variables.\";\n      }\n      const directResponse = await axios.post(`https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent?key=${apiKey}`, {\n        contents: [{\n          parts: [{\n            text: `Generate comprehensive, well-organized notes from this transcript: ${transcript}`\n          }]\n        }]\n      });\n      if ((_directResponse$data = directResponse.data) !== null && _directResponse$data !== void 0 && (_directResponse$data$ = _directResponse$data.candidates) !== null && _directResponse$data$ !== void 0 && (_directResponse$data$2 = _directResponse$data$[0]) !== null && _directResponse$data$2 !== void 0 && (_directResponse$data$3 = _directResponse$data$2.content) !== null && _directResponse$data$3 !== void 0 && (_directResponse$data$4 = _directResponse$data$3.parts) !== null && _directResponse$data$4 !== void 0 && (_directResponse$data$5 = _directResponse$data$4[0]) !== null && _directResponse$data$5 !== void 0 && _directResponse$data$5.text) {\n        return directResponse.data.candidates[0].content.parts[0].text;\n      } else {\n        return \"Could not generate notes. The API response format was unexpected.\";\n      }\n    } catch (error) {\n      var _error$response, _error$response$data, _error$response$data$;\n      console.error(\"Error generating notes:\", error);\n      return \"Error generating notes: \" + (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : (_error$response$data$ = _error$response$data.error) === null || _error$response$data$ === void 0 ? void 0 : _error$response$data$.message) || error.message) + \"\\n\\nPlease check your API key and internet connection.\";\n    }\n  }\n};","map":{"version":3,"names":["axios","API_URL","generateNotes","transcript","response","post","data","notes","Error","serverError","console","error","_directResponse$data","_directResponse$data$","_directResponse$data$2","_directResponse$data$3","_directResponse$data$4","_directResponse$data$5","apiKey","process","env","REACT_APP_GEMINI_API_KEY","directResponse","contents","parts","text","candidates","content","_error$response","_error$response$data","_error$response$data$","message"],"sources":["E:/LETU/Transcript-Notes/Transcript-Notes/react-transcript-notes/src/services/notesGenerationService.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = \"http://localhost:5000/api\";\r\n\r\nexport const generateNotes = async (transcript) => {\r\n  if (!transcript) {\r\n    return \"No transcript provided. Please record or upload audio first.\";\r\n  }\r\n\r\n  try {\r\n    // First try to use the local server\r\n    const response = await axios.post(`${API_URL}/generate-notes`, {\r\n      transcript,\r\n    });\r\n\r\n    if (response.data && response.data.notes) {\r\n      return response.data.notes;\r\n    }\r\n\r\n    throw new Error(\"Invalid response from notes generation server\");\r\n  } catch (serverError) {\r\n    console.error(\r\n      \"Server error, falling back to direct API call:\",\r\n      serverError\r\n    );\r\n\r\n    // Fall back to direct API call if server fails\r\n    try {\r\n      const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\r\n\r\n      if (!apiKey) {\r\n        return \"ERROR: GEMINI_API_KEY is not set in environment variables.\";\r\n      }\r\n\r\n      const directResponse = await axios.post(\r\n        `https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent?key=${apiKey}`,\r\n        {\r\n          contents: [\r\n            {\r\n              parts: [\r\n                {\r\n                  text: `Generate comprehensive, well-organized notes from this transcript: ${transcript}`,\r\n                },\r\n              ],\r\n            },\r\n          ],\r\n        }\r\n      );\r\n\r\n      if (directResponse.data?.candidates?.[0]?.content?.parts?.[0]?.text) {\r\n        return directResponse.data.candidates[0].content.parts[0].text;\r\n      } else {\r\n        return \"Could not generate notes. The API response format was unexpected.\";\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error generating notes:\", error);\r\n      return (\r\n        \"Error generating notes: \" +\r\n        (error.response?.data?.error?.message || error.message) +\r\n        \"\\n\\nPlease check your API key and internet connection.\"\r\n      );\r\n    }\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B;AAE3C,OAAO,MAAMC,aAAa,GAAG,MAAOC,UAAU,IAAK;EACjD,IAAI,CAACA,UAAU,EAAE;IACf,OAAO,8DAA8D;EACvE;EAEA,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,OAAO,iBAAiB,EAAE;MAC7DE;IACF,CAAC,CAAC;IAEF,IAAIC,QAAQ,CAACE,IAAI,IAAIF,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAE;MACxC,OAAOH,QAAQ,CAACE,IAAI,CAACC,KAAK;IAC5B;IAEA,MAAM,IAAIC,KAAK,CAAC,+CAA+C,CAAC;EAClE,CAAC,CAAC,OAAOC,WAAW,EAAE;IACpBC,OAAO,CAACC,KAAK,CACX,gDAAgD,EAChDF,WACF,CAAC;;IAED;IACA,IAAI;MAAA,IAAAG,oBAAA,EAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA;MACF,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB;MAEnD,IAAI,CAACH,MAAM,EAAE;QACX,OAAO,4DAA4D;MACrE;MAEA,MAAMI,cAAc,GAAG,MAAMtB,KAAK,CAACK,IAAI,CACrC,4FAA4Fa,MAAM,EAAE,EACpG;QACEK,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE,CACL;YACEC,IAAI,EAAE,sEAAsEtB,UAAU;UACxF,CAAC;QAEL,CAAC;MAEL,CACF,CAAC;MAED,KAAAS,oBAAA,GAAIU,cAAc,CAAChB,IAAI,cAAAM,oBAAA,gBAAAC,qBAAA,GAAnBD,oBAAA,CAAqBc,UAAU,cAAAb,qBAAA,gBAAAC,sBAAA,GAA/BD,qBAAA,CAAkC,CAAC,CAAC,cAAAC,sBAAA,gBAAAC,sBAAA,GAApCD,sBAAA,CAAsCa,OAAO,cAAAZ,sBAAA,gBAAAC,sBAAA,GAA7CD,sBAAA,CAA+CS,KAAK,cAAAR,sBAAA,gBAAAC,sBAAA,GAApDD,sBAAA,CAAuD,CAAC,CAAC,cAAAC,sBAAA,eAAzDA,sBAAA,CAA2DQ,IAAI,EAAE;QACnE,OAAOH,cAAc,CAAChB,IAAI,CAACoB,UAAU,CAAC,CAAC,CAAC,CAACC,OAAO,CAACH,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI;MAChE,CAAC,MAAM;QACL,OAAO,mEAAmE;MAC5E;IACF,CAAC,CAAC,OAAOd,KAAK,EAAE;MAAA,IAAAiB,eAAA,EAAAC,oBAAA,EAAAC,qBAAA;MACdpB,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,OACE,0BAA0B,IACzB,EAAAiB,eAAA,GAAAjB,KAAK,CAACP,QAAQ,cAAAwB,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBtB,IAAI,cAAAuB,oBAAA,wBAAAC,qBAAA,GAApBD,oBAAA,CAAsBlB,KAAK,cAAAmB,qBAAA,uBAA3BA,qBAAA,CAA6BC,OAAO,KAAIpB,KAAK,CAACoB,OAAO,CAAC,GACvD,wDAAwD;IAE5D;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}