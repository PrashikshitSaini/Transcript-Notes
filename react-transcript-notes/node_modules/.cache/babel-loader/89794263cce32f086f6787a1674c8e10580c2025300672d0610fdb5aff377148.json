{"ast":null,"code":"var _jsxFileName = \"E:\\\\LETU\\\\Transcript-Notes\\\\Transcript-Notes\\\\react-transcript-notes\\\\src\\\\components\\\\RecordingControls.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { ReactMic } from \"react-mic\";\nimport { transcribeAudio, setupLiveTranscription } from \"../services/transcriptionService\";\nimport { generateNotes } from \"../services/notesGenerationService\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RecordingControls = ({\n  isRecording,\n  isPaused,\n  onStartRecording,\n  onPauseRecording,\n  onResumeRecording,\n  onStopRecording,\n  onNotesGenerated\n}) => {\n  _s();\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [isReactMicSupported, setIsReactMicSupported] = useState(true);\n  const [interimTranscript, setInterimTranscript] = useState(\"\");\n  const fileInputRef = useRef(null);\n  const recognitionRef = useRef(null);\n\n  // Set up Web Speech API for live transcription\n  useEffect(() => {\n    const {\n      supported,\n      recognition,\n      error\n    } = setupLiveTranscription();\n    if (!supported) {\n      console.error(\"Speech recognition not supported:\", error);\n      setIsReactMicSupported(false);\n      return;\n    }\n    recognitionRef.current = recognition;\n\n    // Set up handler for interim results\n    window.onInterimTranscript = text => {\n      setInterimTranscript(text);\n    };\n\n    // Check general media support\n    const checkMediaSupport = async () => {\n      try {\n        await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n      } catch (err) {\n        console.error(\"Media not supported:\", err);\n        setIsReactMicSupported(false);\n      }\n    };\n    checkMediaSupport();\n    return () => {\n      // Clean up\n      window.onInterimTranscript = null;\n      if (recognitionRef.current) {\n        try {\n          recognitionRef.current.stop();\n        } catch (e) {\n          // Ignore errors when stopping\n        }\n      }\n    };\n  }, []);\n\n  // Control recognition based on recording state\n  useEffect(() => {\n    if (!recognitionRef.current) return;\n    if (isRecording && !isPaused) {\n      try {\n        recognitionRef.current.start();\n      } catch (e) {\n        // Recognition might already be started\n      }\n    } else {\n      try {\n        recognitionRef.current.stop();\n      } catch (e) {\n        // Recognition might already be stopped\n      }\n    }\n  }, [isRecording, isPaused]);\n  const onData = recordedBlob => {\n    // Not storing streaming data to avoid excessive memory usage\n  };\n  const onStop = async recordedBlob => {\n    try {\n      setIsProcessing(true);\n\n      // Convert blob to file\n      const audioFile = new File([recordedBlob.blob], \"recording.wav\", {\n        type: \"audio/wav\"\n      });\n\n      // The transcription is already captured through Web Speech API\n      // We'll use the recorded transcript from the window object\n      const transcript = window.recordedTranscript || \"No speech detected. Please try again.\";\n\n      // Generate notes from transcript\n      const notes = await generateNotes(transcript);\n      onNotesGenerated(notes);\n    } catch (error) {\n      console.error(\"Error processing recording:\", error);\n      onNotesGenerated(\"Error processing recording: \" + error.message);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const handleFileSelect = async e => {\n    if (e.target.files && e.target.files[0]) {\n      const file = e.target.files[0];\n      try {\n        setIsProcessing(true);\n\n        // Transcribe audio file\n        const transcript = await transcribeAudio(file);\n\n        // Generate notes from transcript\n        const notes = await generateNotes(transcript);\n        onNotesGenerated(notes);\n      } catch (error) {\n        console.error(\"Error processing file:\", error);\n        onNotesGenerated(\"Error processing file: \" + error.message);\n      } finally {\n        setIsProcessing(false);\n      }\n    }\n  };\n  const handleShortRecording = () => {\n    if (isRecording) return;\n    // Reset transcript for new recording\n    window.recordedTranscript = \"\";\n    onStartRecording();\n    setTimeout(() => {\n      if (isRecording) {\n        onStopRecording();\n      }\n    }, 10000); // 10 seconds for short recording\n  };\n  const handleLongRecording = () => {\n    if (isRecording) return;\n    // Reset transcript for new recording\n    window.recordedTranscript = \"\";\n    onStartRecording();\n    // Long recording relies on user to stop manually\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"recording-controls\",\n    children: [isReactMicSupported ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ReactMic, {\n        record: isRecording && !isPaused,\n        className: \"sound-wave\",\n        onStop: onStop,\n        onData: onData,\n        strokeColor: \"#000000\",\n        backgroundColor: \"#FF4081\",\n        mimeType: \"audio/wav\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this), isRecording && !isPaused && interimTranscript && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"interim-transcript\",\n        children: /*#__PURE__*/_jsxDEV(\"em\", {\n          children: [\"Currently transcribing: \", interimTranscript]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sound-wave-placeholder\",\n      children: \"Microphone access not available in this browser. Please try using the file upload option instead.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleShortRecording,\n        disabled: isRecording || isProcessing || !isReactMicSupported,\n        children: \"Record from Mic\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"file-label\",\n        children: [\"Select Audio File\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          ref: fileInputRef,\n          onChange: handleFileSelect,\n          accept: \"audio/wav,audio/mp3,audio/m4a\",\n          className: \"file-input\",\n          disabled: isRecording || isProcessing\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLongRecording,\n        disabled: isRecording || isProcessing,\n        children: \"Record 30 Minutes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onPauseRecording,\n        disabled: !isRecording || isPaused || isProcessing,\n        children: \"Pause Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onResumeRecording,\n        disabled: !isRecording || !isPaused || isProcessing,\n        children: \"Resume Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onStopRecording,\n        disabled: !isRecording || isProcessing,\n        children: \"Stop Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), isProcessing && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Processing... Please wait\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n};\n_s(RecordingControls, \"sfk0JJmeymXTzQdoDcAwbv/Jmp8=\");\n_c = RecordingControls;\nexport default RecordingControls;\nvar _c;\n$RefreshReg$(_c, \"RecordingControls\");","map":{"version":3,"names":["React","useRef","useState","useEffect","ReactMic","transcribeAudio","setupLiveTranscription","generateNotes","jsxDEV","_jsxDEV","Fragment","_Fragment","RecordingControls","isRecording","isPaused","onStartRecording","onPauseRecording","onResumeRecording","onStopRecording","onNotesGenerated","_s","isProcessing","setIsProcessing","isReactMicSupported","setIsReactMicSupported","interimTranscript","setInterimTranscript","fileInputRef","recognitionRef","supported","recognition","error","console","current","window","onInterimTranscript","text","checkMediaSupport","navigator","mediaDevices","getUserMedia","audio","err","stop","e","start","onData","recordedBlob","onStop","audioFile","File","blob","type","transcript","recordedTranscript","notes","message","handleFileSelect","target","files","file","handleShortRecording","setTimeout","handleLongRecording","className","children","record","strokeColor","backgroundColor","mimeType","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","ref","onChange","accept","_c","$RefreshReg$"],"sources":["E:/LETU/Transcript-Notes/Transcript-Notes/react-transcript-notes/src/components/RecordingControls.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\r\nimport { ReactMic } from \"react-mic\";\r\nimport {\r\n  transcribeAudio,\r\n  setupLiveTranscription,\r\n} from \"../services/transcriptionService\";\r\nimport { generateNotes } from \"../services/notesGenerationService\";\r\n\r\nconst RecordingControls = ({\r\n  isRecording,\r\n  isPaused,\r\n  onStartRecording,\r\n  onPauseRecording,\r\n  onResumeRecording,\r\n  onStopRecording,\r\n  onNotesGenerated,\r\n}) => {\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [isReactMicSupported, setIsReactMicSupported] = useState(true);\r\n  const [interimTranscript, setInterimTranscript] = useState(\"\");\r\n  const fileInputRef = useRef(null);\r\n  const recognitionRef = useRef(null);\r\n\r\n  // Set up Web Speech API for live transcription\r\n  useEffect(() => {\r\n    const { supported, recognition, error } = setupLiveTranscription();\r\n\r\n    if (!supported) {\r\n      console.error(\"Speech recognition not supported:\", error);\r\n      setIsReactMicSupported(false);\r\n      return;\r\n    }\r\n\r\n    recognitionRef.current = recognition;\r\n\r\n    // Set up handler for interim results\r\n    window.onInterimTranscript = (text) => {\r\n      setInterimTranscript(text);\r\n    };\r\n\r\n    // Check general media support\r\n    const checkMediaSupport = async () => {\r\n      try {\r\n        await navigator.mediaDevices.getUserMedia({ audio: true });\r\n      } catch (err) {\r\n        console.error(\"Media not supported:\", err);\r\n        setIsReactMicSupported(false);\r\n      }\r\n    };\r\n\r\n    checkMediaSupport();\r\n\r\n    return () => {\r\n      // Clean up\r\n      window.onInterimTranscript = null;\r\n      if (recognitionRef.current) {\r\n        try {\r\n          recognitionRef.current.stop();\r\n        } catch (e) {\r\n          // Ignore errors when stopping\r\n        }\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Control recognition based on recording state\r\n  useEffect(() => {\r\n    if (!recognitionRef.current) return;\r\n\r\n    if (isRecording && !isPaused) {\r\n      try {\r\n        recognitionRef.current.start();\r\n      } catch (e) {\r\n        // Recognition might already be started\r\n      }\r\n    } else {\r\n      try {\r\n        recognitionRef.current.stop();\r\n      } catch (e) {\r\n        // Recognition might already be stopped\r\n      }\r\n    }\r\n  }, [isRecording, isPaused]);\r\n\r\n  const onData = (recordedBlob) => {\r\n    // Not storing streaming data to avoid excessive memory usage\r\n  };\r\n\r\n  const onStop = async (recordedBlob) => {\r\n    try {\r\n      setIsProcessing(true);\r\n\r\n      // Convert blob to file\r\n      const audioFile = new File([recordedBlob.blob], \"recording.wav\", {\r\n        type: \"audio/wav\",\r\n      });\r\n\r\n      // The transcription is already captured through Web Speech API\r\n      // We'll use the recorded transcript from the window object\r\n      const transcript =\r\n        window.recordedTranscript || \"No speech detected. Please try again.\";\r\n\r\n      // Generate notes from transcript\r\n      const notes = await generateNotes(transcript);\r\n\r\n      onNotesGenerated(notes);\r\n    } catch (error) {\r\n      console.error(\"Error processing recording:\", error);\r\n      onNotesGenerated(\"Error processing recording: \" + error.message);\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  const handleFileSelect = async (e) => {\r\n    if (e.target.files && e.target.files[0]) {\r\n      const file = e.target.files[0];\r\n\r\n      try {\r\n        setIsProcessing(true);\r\n\r\n        // Transcribe audio file\r\n        const transcript = await transcribeAudio(file);\r\n\r\n        // Generate notes from transcript\r\n        const notes = await generateNotes(transcript);\r\n\r\n        onNotesGenerated(notes);\r\n      } catch (error) {\r\n        console.error(\"Error processing file:\", error);\r\n        onNotesGenerated(\"Error processing file: \" + error.message);\r\n      } finally {\r\n        setIsProcessing(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleShortRecording = () => {\r\n    if (isRecording) return;\r\n    // Reset transcript for new recording\r\n    window.recordedTranscript = \"\";\r\n    onStartRecording();\r\n    setTimeout(() => {\r\n      if (isRecording) {\r\n        onStopRecording();\r\n      }\r\n    }, 10000); // 10 seconds for short recording\r\n  };\r\n\r\n  const handleLongRecording = () => {\r\n    if (isRecording) return;\r\n    // Reset transcript for new recording\r\n    window.recordedTranscript = \"\";\r\n    onStartRecording();\r\n    // Long recording relies on user to stop manually\r\n  };\r\n\r\n  return (\r\n    <div className=\"recording-controls\">\r\n      {isReactMicSupported ? (\r\n        <>\r\n          <ReactMic\r\n            record={isRecording && !isPaused}\r\n            className=\"sound-wave\"\r\n            onStop={onStop}\r\n            onData={onData}\r\n            strokeColor=\"#000000\"\r\n            backgroundColor=\"#FF4081\"\r\n            mimeType=\"audio/wav\"\r\n          />\r\n          {isRecording && !isPaused && interimTranscript && (\r\n            <div className=\"interim-transcript\">\r\n              <em>Currently transcribing: {interimTranscript}</em>\r\n            </div>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <div className=\"sound-wave-placeholder\">\r\n          Microphone access not available in this browser. Please try using the\r\n          file upload option instead.\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"button-group\">\r\n        <button\r\n          onClick={handleShortRecording}\r\n          disabled={isRecording || isProcessing || !isReactMicSupported}\r\n        >\r\n          Record from Mic\r\n        </button>\r\n\r\n        <label className=\"file-label\">\r\n          Select Audio File\r\n          <input\r\n            type=\"file\"\r\n            ref={fileInputRef}\r\n            onChange={handleFileSelect}\r\n            accept=\"audio/wav,audio/mp3,audio/m4a\"\r\n            className=\"file-input\"\r\n            disabled={isRecording || isProcessing}\r\n          />\r\n        </label>\r\n\r\n        <button\r\n          onClick={handleLongRecording}\r\n          disabled={isRecording || isProcessing}\r\n        >\r\n          Record 30 Minutes\r\n        </button>\r\n\r\n        <button\r\n          onClick={onPauseRecording}\r\n          disabled={!isRecording || isPaused || isProcessing}\r\n        >\r\n          Pause Recording\r\n        </button>\r\n\r\n        <button\r\n          onClick={onResumeRecording}\r\n          disabled={!isRecording || !isPaused || isProcessing}\r\n        >\r\n          Resume Recording\r\n        </button>\r\n\r\n        <button\r\n          onClick={onStopRecording}\r\n          disabled={!isRecording || isProcessing}\r\n        >\r\n          Stop Recording\r\n        </button>\r\n      </div>\r\n\r\n      {isProcessing && <p>Processing... Please wait</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecordingControls;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}